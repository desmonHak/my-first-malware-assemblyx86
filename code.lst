     1                                  [bits 32]
     2                                  %define STD_OUTPUT_HANDLE -11
     3                                  
     4                                  section .bss
     5                                  
     6                                  section .text
     7                                      global _WinMain@16           ; Declaracion de la funcion principal del programa
     8                                      extern _GetStdHandle@4       ; Declaracion de la funcion GetStdHandle de Windows
     9                                      extern _WriteFile@20         ; Declaracion de la funcion WriteFile de Windows
    10                                      extern _ExitProcess@4        ; Declaracion de la funcion ExitProcess de Windows
    11                                  
    12                                  _WinMain@16:
    13                                      ; Reservar espacio en la pila para la variable local
    14 00000000 83EC04                      sub esp, 4
    15                                  
    16                                      ; Obtener el identificador de la salida estándar
    17                                      ; HANDLE ebx = GetStdHandle(DWORD STD_OUTPUT_HANDLE)
    18 00000003 6AF5                        push STD_OUTPUT_HANDLE       ; Parametro: STD_OUTPUT_HANDLE (-11)
    19 00000005 E8(00000000)                call _GetStdHandle@4         ; Llama a la funcion GetStdHandle para obtener el identificador de la salida estándar
    20 0000000A 89C3                        mov ebx, eax                 ; Almacena el identificador de la salida estándar en ebx
    21                                  
    22                                      ; Escribir el mensaje en la salida estándar
    23                                      ; BOOL WriteFile(
    24                                      ;   [in]                HANDLE       hFile,
    25                                      ;   [in]                LPCVOID      lpBuffer,
    26                                      ;   [in]                DWORD        nNumberOfBytesToWrite,
    27                                      ;   [out, optional]     LPDWORD      lpNumberOfBytesWritten,
    28                                      ;   [in, out, optional] LPOVERLAPPED lpOverlapped
    29                                      ; );
    30                                      ; WriteFile(ebx, message, length, eax, 0)
    31                                  
    32                                      
    33                                  
    34 0000000C EB0A                        jmp _a
    35 0000000E 90AF11A09090AF11A0-         db 0x90, 0xaf, 0x11, 0xa0, 0x90, 0x90, 0xaf, 0x11, 0xa0, 0x90
    35 00000017 90                 
    36                                      _a:
    37 00000018 6A00                        push 0                       ; Parametro: lpOverlapped (0)
    38                                  
    39 0000001A 8D442404                    lea eax, [esp+4]             ; Calcula la direccion del Parametro lpNumberOfBytesWritten
    40 0000001E 50                          push eax                     ; Parametro: lpNumberOfBytesWritten
    41 0000001F 6A0E                        push dword length            ; Parametro: nNumberOfBytesToWrite (longitud del mensaje)
    42 00000021 68[00000000]                push message                 ; Parametro: lpBuffer (puntero al mensaje)
    43 00000026 53                          push ebx                     ; Parametro: hFile (identificador de la salida estándar)
    44                                  
    45 00000027 10CD<rep 5h>                times 5 dw 0xcd10
    46 00000031 EB00                        jmp _b
    47                                      _b:
    48 00000033 E8(00000000)                call _WriteFile@20           ; Llama a la funcion WriteFile para escribir el mensaje en la consola
    49 00000038 90<rep 2h>                  times 2 db 0x90
    50                                  
    51                                      ; Salir del programa
    52                                      ; ExitProcess(0)
    53 0000003A 6A00                        push 0                       ; Parametro: exitCode (0)
    54 0000003C E8(00000000)                call _ExitProcess@4          ; Llama a la funcion ExitProcess para terminar el programa
    55                                  
    56                                  
    57                                  section .data
    58 00000000 48656C6C6F2C20576F-         message db 'Hello, World!', 0  ; Definición del mensaje a mostrar en la consola
    58 00000009 726C642100         
    59                                      length: equ $-message
    60                                  
    61 0000000E 00<rep 1F0h>            times 510 -( $ - $$ ) db 0
